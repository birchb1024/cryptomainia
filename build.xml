<project name="Cryptomainia" default="make-and-test" basedir=".">
    
    <property name="build.compiler" value="javac1.7"/> <!-- See https://bz.apache.org/bugzilla/show_bug.cgi?id=53347 -->
    <property name="needed.lib.dir" value="needed" />
    <property name="junit.lib.dir" value="needed" />
    <property name="build.dir" value="antbuild" />
    <property name="dist.dir" value="dist" />
    <property name="rel.dir" value="rel" />
    <property name="src.compile.dir" value="${build.dir}/classes" />
    <property name="src.dir" value="src" />
    <property name="git.describe.file" value="${build.dir}/git-describe.txt"/>

    <tstamp>
        <format property="TODAY" pattern="dd/MM/yyyy HH:mm:ss" />
    </tstamp>

    <target name="clean" depends="only-clean" />
    <target name="compile" depends="only-clean, only-init, only-compile" description="Compile the Java" />
    <target name="make-jar" depends="only-clean, only-init, version-default,compile, only-make-jar" description="compile and create jar" />
    <target name="make-and-test" depends="make-jar, only-test" description="compile and create jar, then run tests" />

    <!-- Libraries required  -->
    <fileset id="needed.libs" dir="${needed.lib.dir}">
        <include name="jasypt-1.9.0.jar" />
        <include name="junit.jar" />
    </fileset>


    <!-- ================================================================== -->
    <!--                        Classpaths                                  -->
    <!-- ================================================================== -->
    <path id="src.compile.classpath">
        <fileset refid="needed.libs" />
    </path>

    <target name="version-default" depends="git-info" description="Compute version number from Git.">
        <property name="implementation-version" value="${git.workspace.version}-${build.id}"/>
        <property name="version" value="${implementation-version}"/>
        <loadresource property="version.underscores">
            <propertyresource name="implementation-version"/>
            <filterchain>
                <tokenfilter>
                <filetokenizer/>
                <replacestring from="." to="_"/>
                </tokenfilter>
            </filterchain>
        </loadresource>
        <echo>Version = ${version}</echo>
        <echo>Version.underscores = '${version.underscores}'</echo>
        <echo>implementation-version = '${implementation-version}'</echo>
    </target>

    <target name="git-info" description="Extract Git information." depends="only-git-workspace, only-git-status">
        <property name="specification-version" value="${git.workspace.specification.version}"/>
        <buildnumber file="${git.workspace.version}-build-number.txt"/>
        <property name="build.id" value="${build.number}"/>
        <echo>specification version = ${specification-version}</echo>
        <echo>Build Number = ${build.id}</echo>
        <echo>version = ${version}</echo>
    </target>

    <target name="git-committed" description="Fail if uncommitted changes" depends="only-git-status">
        <fail if="working-folder-has-uncommited-changes" />
    </target>

    <target name="only-git-status" description="look for uncommitted files">
        <exec executable="bash" outputproperty="git.status" errorproperty="git.error" failonerror="true">
            <arg value="-c"/>
            <arg value="git status --porcelain | wc -l" />
        </exec>
        <condition property="working-folder-has-uncommited-changes">
            <not>
                <equals arg1="${git.status}" arg2="0" />
            </not>
        </condition>
        <echo>git.status = ${git.status}</echo>
        <echo>working-folder-has-uncommited-changes = ${working-folder-has-uncommited-changes}</echo>
    </target>

    <target name="only-git-workspace">
        <exec executable="git" outputproperty="git.workspace.version" errorproperty="git.error" failonerror="true">
            <arg value="describe"/>
            <arg value="--tags" />
        </exec>
        <echo>git.workspace.version = ${git.workspace.version}</echo>
        <exec executable="git" output="${git.describe.file}" errorproperty="git.error" failonerror="true">
            <arg value="describe"/>
            <arg value="--tags" />
            <arg value="--abbrev=0" />
        </exec>
        <loadfile srcfile="${git.describe.file}" property="git.workspace.tag"/>
        <echo>git.workspace.tag = ${git.workspace.tag}</echo>
        <condition property="workspace-contains-a-tagged-version">
            <equals arg1="${git.workspace.tag}" arg2="${git.workspace.version}" />
        </condition>
        <echo>workspace-contains-a-tagged-version = ${workspace-contains-a-tagged-version}</echo>
        <loadfile srcfile="${git.describe.file}" property="git.workspace.specification.version">
            <filterchain>
               <headfilter lines="1" skip="0"/>
               <tokenfilter>
                  <replaceregex pattern="\.[0-9]+$" replace="" flags="gi"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <echo>git.workspace.specification.version = ${git.workspace.specification.version}</echo>
   </target>
   
   <target name="tagged-version" depends="git-info, git-committed">
        <fail unless="workspace-contains-a-tagged-version" />
   </target>

   <target name="only-init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${version.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${rel.dir}" />
        <mkdir dir="${src.compile.dir}" />
    </target>

    <target name="only-clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${rel.dir}" />
    </target>

    <target name="only-compile">
        <javac srcdir="${src.dir}" destdir="${src.compile.dir}" classpathref="src.compile.classpath"
                  source="1.6" target="1.6" verbose="no" includeantruntime="false">
            <include name="org/**" />
        </javac>
    </target>


    <target name="only-make-jar">
        <jar destfile="${dist.dir}/cryptomainia.jar" duplicate="fail">
            <fileset dir="${basedir}" includes="README LICENSE" />
            <fileset dir="${src.compile.dir}" includes="**/*.class" />
            <fileset dir="${src.dir}" excludes="**/*.properties" />
            <manifest>
                <attribute name="Main-Class" value="org.birch.cryptomainia.EncryptArgv" />
                <attribute name="Class-Path" value="needed/jasypt-1.9.0.jar" />
                <attribute name="Specification-Title" value="Cryptomainia" />
                <attribute name="Implementation-Title" value="Cryptomainia" />
                <attribute name="Implementation-Version" value="${implementation-version}" />
                <attribute name="Implementation-Vendor" value="Peter William Birch" />
                <attribute name="Implementation-Date" value="${TODAY}" />
            </manifest>
        </jar>
    	<copy file="needed/jasypt-1.9.0.jar" tofile="dist/jasypt-1.9.0.jar" verbose="true" overwrite="true"/>
    </target>

    <target name="only-test">
        <exec executable="/bin/bash">
            <arg line="test/test-cli.sh"/>
        </exec>
    </target>


   </project>
